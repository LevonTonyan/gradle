apply plugin: 'java'
group = 'org.ltonyan.home'
version = '1.0.0'
description = """helloworld-ws"""


sourceCompatibility = 11
targetCompatibility = 11
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}


jar {
          manifest {
                attributes 'Main-Class': 'org.jboss.as.quickstarts.wshelloworld.HelloWorldServiceImpl'
        }
}

repositories {
	mavenCentral()
}
dependencies {
    implementation group: 'javax.jws', name: 'jsr181-api', version: '1.0-MR1'
   implementation group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-core', version: '1.7.1.Final'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.7.0'
    testImplementation group: 'org.glassfish.main.extras', name: 'glassfish-embedded-all', version: '4.1.2'
    testImplementation group: 'org.jboss.arquillian.container', name: 'arquillian-glassfish-embedded-3.1', version: '1.0.0.Final'
    compileOnly group: 'org.jboss.arquillian', name: 'arquillian-bom', version: '1.1.13.Final'

}


// Define your custom tasks
task buildCustom(dependsOn: ['clean', 'compileJava', 'testCustom', 'jar']) {
    description 'Builds the project with custom tasks'
}

task testCustom(dependsOn: 'build') {
    description 'Runs custom tests'
}

task printCurrentDirectory {
    doLast {
        def currentDirectory = project.projectDir
        println "Current directory: $currentDirectory"
    }
}

task runJarAndArchive(type: Exec) {
    dependsOn build
       doLast {
        // Step 1: Run the JAR and save the output to a log file
        def command = "java -jar build/libs/helloworld-ws-1.0.0.jar > build/output.log 2>&1"
        def output = new ByteArrayOutputStream()
        exec {
            commandLine 'sh', '-c', command
            standardOutput = output
        }

        // Step 2: Create a tarball of the JAR file
        def tarballName = "hello-${project.version}.tar.gz"
        def tarballCommand = "tar -czvf $tarballName -C build/libs helloworld-ws-1.0.0.jar"
        exec {
            commandLine 'sh', '-c', tarballCommand
        }

        // Step 3: Attach the tarball and log file as custom artifacts
        publishing {
            publications {
                customArtifacts(MavenPublication) {
                    artifact tarballName
                    artifact 'build/output.log'
                }
            }
        }
    }
}

// Attach the log file to the build artifacts
artifacts {
    archives createArtifact
    archives file('output.log')
}


task hello(dependsOn: 'testCustom') {
    description 'Custom hello task'
    doLast {
        println 'Hello, custom task!'
    }
}

