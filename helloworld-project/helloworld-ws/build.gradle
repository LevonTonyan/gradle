apply plugin: 'java'
group = 'org.ltonyan.home'
version = '1.0.0'
description = """helloworld-ws"""


sourceCompatibility = 7
targetCompatibility = 1.7
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}


jar {
          manifest {
                attributes 'Main-Class': 'org.jboss.as.quickstarts.wshelloworld.HelloWorldServiceImpl'
        }
}

repositories {
	mavenCentral()
}
dependencies {
    implementation group: 'javax.jws', name: 'jsr181-api', version: '1.0-MR1'
   implementation group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-core', version: '1.7.1.Final'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.7.0'
    testImplementation group: 'org.glassfish.main.extras', name: 'glassfish-embedded-all', version: '4.1.2'
    testImplementation group: 'org.jboss.arquillian.container', name: 'arquillian-glassfish-embedded-3.1', version: '1.0.0.Final'
    compileOnly group: 'org.jboss.arquillian', name: 'arquillian-bom', version: '1.1.13.Final'

}


// Define your custom tasks
task buildCustom(dependsOn: ['clean', 'compileJava', 'testCustom', 'jar']) {
    description 'Builds the project with custom tasks'
}

task testCustom(dependsOn: 'build') {
    description 'Runs custom tests'
}

task runJarAndArchive(type: Exec) {
    dependsOn build

    commandLine 'java', '-jar', 'helloworld-ws/build/libs/helloworld-ws-1.0.0.jar'

    // Redirect the output to 'output.log'
    standardOutput = new FileOutputStream('output.log')

    doLast {
        // Create a TAR.GZ archive that includes the JAR file
        ant.tar(destfile: "hello-${project.version}.tar.gz") {
            from("helloworld-ws/build/libs/helloworld-ws-1.0.0.jar")
        }
        
        // Archive both the TAR.GZ file and the output log
        archiveArtifacts {
            artifacts("hello-${project.version}.tar.gz")
            artifacts("output.log")
        }
    }
}


task hello(dependsOn: 'testCustom') {
    description 'Custom hello task'
    doLast {
        println 'Hello, custom task!'
    }
}

